-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/falgon/hmgit#readme</a>
@package hmgit
@version 1.0.0.0

module HMGit.Development.TH
relativeProjRoot :: FilePath -> Q Exp

module HMGit.Internal.Exceptions
invalidArgument :: String -> IOException
noSuchThing :: String -> IOException
newtype BugException
BugException :: String -> BugException
class MonadThrowable m
fromMonad :: (MonadThrowable m, MonadThrow n, Exception e) => Maybe e -> m ~> n
truncOtherThanBugs :: MonadCatch m => m () -> m ()
instance GHC.Show.Show HMGit.Internal.Exceptions.BugException
instance GHC.Exception.Type.Exception e => HMGit.Internal.Exceptions.MonadThrowable (Data.Either.Either e)
instance HMGit.Internal.Exceptions.MonadThrowable GHC.Maybe.Maybe
instance HMGit.Internal.Exceptions.MonadThrowable Data.Functor.Identity.Identity
instance HMGit.Internal.Exceptions.MonadThrowable []
instance (GHC.Exception.Type.Exception e, HMGit.Internal.Exceptions.MonadThrowable m) => HMGit.Internal.Exceptions.MonadThrowable (Control.Monad.Trans.Except.ExceptT e m)
instance HMGit.Internal.Exceptions.MonadThrowable m => HMGit.Internal.Exceptions.MonadThrowable (Control.Monad.Trans.Maybe.MaybeT m)
instance HMGit.Internal.Exceptions.MonadThrowable m => HMGit.Internal.Exceptions.MonadThrowable (Control.Monad.Trans.Identity.IdentityT m)
instance HMGit.Internal.Exceptions.MonadThrowable m => HMGit.Internal.Exceptions.MonadThrowable (Control.Monad.Trans.List.ListT m)
instance (GHC.Exception.Type.Exception e, HMGit.Internal.Exceptions.MonadThrowable m) => HMGit.Internal.Exceptions.MonadThrowable (Control.Monad.Trans.Error.ErrorT e m)
instance GHC.Exception.Type.Exception HMGit.Internal.Exceptions.BugException

module HMGit.Internal.Core.Runner.HMGitConfig
data HMGitConfig
HMGitConfig :: Path Abs Dir -> Int -> HMGitConfig
[hmGitDir] :: HMGitConfig -> Path Abs Dir
[hmGitTreeLimit] :: HMGitConfig -> Int
HMGitConfigInit :: HMGitConfig
hmGitConfig :: (MonadThrow m, MonadIO m) => String -> m HMGitConfig

module HMGit.Internal.Core.Runner.API
type HMGitT = ReaderT HMGitConfig
hmGitDBPath :: Monad m => HMGitT m (Path Abs Dir)
hmGitDBName :: Monad m => HMGitT m String
hmGitRoot :: Monad m => HMGitT m (Path Abs Dir)
hmGitTreeLim :: Monad m => HMGitT m Int
hmGitIndexPath :: Monad m => HMGitT m (Path Abs File)
getCurrentDirFromHMGit :: (MonadThrow m, MonadIO m) => HMGitT m (Path Rel Dir)
runHMGit :: HMGitT m a -> HMGitConfig -> m a

module HMGit.Internal.Core.Runner

module HMGit.Development
gitCfg :: HMGitConfig

module HMGit.Commands.Porcelain.Init.Core
type RepositoryName = String
newtype Init m
Init :: (RepositoryName -> HMGitT m ()) -> Init m
initDefault :: (MonadThrow m, MonadIO m) => String -> Init m
initQuiet :: MonadIO m => String -> Init m
init :: (String -> Init m) -> String -> RepositoryName -> HMGitT m ()

module HMGit.Internal.Parser.Pathspecs.Glob
transpile :: MonadThrow m => String -> m GlobIR
isLiteral :: GlobIR -> Bool
match :: String -> GlobIR -> Bool
match' :: String -> String -> Bool
instance GHC.Show.Show HMGit.Internal.Parser.Pathspecs.Glob.GlobIRToken

module HMGit.Internal.Utils
stateEmpty :: (Foldable t, MonadPlus m) => (a, t b) -> m a
strictOne :: (MonadPlus m, MonadThrow m) => [a] -> m a
foldMapM :: (Monad m, Monoid w, Foldable t) => (a -> m w) -> t a -> m w
foldChoice :: (Foldable t, Alternative f) => (a -> f b) -> t a -> f b
foldChoiceM :: (Monad m, Alternative f, Foldable t) => (a -> m (f b)) -> t a -> m (f b)
formatHexStrings :: MonadThrow m => (Integral a, Show a) => [a] -> m String
formatHexByteString :: MonadThrow m => ByteString -> m String
formatHexByteString' :: MonadThrow m => ByteString -> m String
first3M :: Functor m => (a -> m a') -> (a, b, c) -> m (a', b, c)
makeRelativeEx :: (MonadIO m, MonadThrow m) => FilePath -> FilePath -> m FilePath
(?*>) :: Alternative f => Bool -> f a -> f a
(??) :: Functor f => f (a -> b) -> a -> f b
bothM :: Monad m => (a -> m b) -> (a, a) -> m (b, b)
instance GHC.Show.Show HMGit.Internal.Utils.DifferentDrives
instance GHC.Exception.Type.Exception HMGit.Internal.Utils.DifferentDrives

module HMGit.Internal.Parser.Core.ByteString
data ParseException
TreeParser :: String -> ParseException
IndexParser :: String -> ParseException
runByteStringParser :: (MonadThrow m, Show e, ShowErrorComponent e, Typeable e, VisualStream s, TraversableStream s, Typeable s, Show s, Show (Token s)) => Parsec e s a -> Path b t -> s -> m a
type ByteStringParser = Parsec ParseException ByteString
pNull :: ByteStringParser Word8
pSpace :: ByteStringParser Word8
pDecimals :: Read i => ByteStringParser i
fromBinaryGetter :: (String -> ParseException) -> Get ~> ByteStringParser
instance GHC.Show.Show HMGit.Internal.Parser.Core.ByteString.ParseException
instance GHC.Classes.Ord HMGit.Internal.Parser.Core.ByteString.ParseException
instance GHC.Classes.Eq HMGit.Internal.Parser.Core.ByteString.ParseException
instance Text.Megaparsec.Error.ShowErrorComponent HMGit.Internal.Parser.Core.ByteString.ParseException
instance GHC.Exception.Type.Exception HMGit.Internal.Parser.Core.ByteString.ParseException

module HMGit.Internal.Parser.Index
data IndexEntry
IndexEntry :: Word32 -> Word32 -> Word32 -> Word32 -> Word32 -> Word32 -> Word32 -> Word32 -> Word32 -> Word32 -> ByteString -> Word16 -> Path Rel File -> IndexEntry

-- | the last time a file's metadata changed, this is stat(2) data
[ieCtimeS] :: IndexEntry -> Word32

-- | nanosecond fractions, this is stat(2) data
[ieCtimeN] :: IndexEntry -> Word32

-- | mtime seconds, the last time a file's data changed, this is stat(2)
--   data
[ieMTimeS] :: IndexEntry -> Word32

-- | mtime nanosecond fractions, this is stat(2) data
[ieMTimeN] :: IndexEntry -> Word32

-- | this is stat(2) data
[ieDev] :: IndexEntry -> Word32

-- | this is stat(2) data
[ieIno] :: IndexEntry -> Word32

-- | mode, split into (high to low bits)
[ieMode] :: IndexEntry -> Word32

-- | this is stat(2) data
[ieUid] :: IndexEntry -> Word32

-- | this is stat(2) data
[ieGid] :: IndexEntry -> Word32

-- | This is the on-disk size from stat(2), truncated to 32-bit.
[ieSize] :: IndexEntry -> Word32

-- | 160-bit SHA-1 for the represented object
[ieSha1] :: IndexEntry -> ByteString

-- | A 16-bit <tt>flags</tt> field split into (high to low bits)
[ieFlags] :: IndexEntry -> Word16
[iePath] :: IndexEntry -> Path Rel File
indexParser :: ByteStringParser [IndexEntry]
putIndex :: Foldable t => t IndexEntry -> Put
instance GHC.Show.Show HMGit.Internal.Parser.Index.IndexHeader
instance GHC.Show.Show HMGit.Internal.Parser.Index.IndexEntry

module HMGit.Internal.Parser.Core

module HMGit.Internal.Parser.Object
data ObjectType
Blob :: ObjectType
Commit :: ObjectType
Tree :: ObjectType
objectParser :: ByteStringParser (ObjectType, ByteString)
treeParser :: Int -> ByteStringParser [(CMode, Path Rel File, String)]
instance GHC.Enum.Enum HMGit.Internal.Parser.Object.ObjectType
instance GHC.Classes.Eq HMGit.Internal.Parser.Object.ObjectType
instance GHC.Show.Show HMGit.Internal.Parser.Object.ObjectType
instance GHC.Read.Read HMGit.Internal.Parser.Object.ObjectType

module HMGit.Internal.Parser
type ByteStringParser = Parsec ParseException ByteString
data ParseException
runByteStringParser :: (MonadThrow m, Show e, ShowErrorComponent e, Typeable e, VisualStream s, TraversableStream s, Typeable s, Show s, Show (Token s)) => Parsec e s a -> Path b t -> s -> m a
data ObjectType
Blob :: ObjectType
Commit :: ObjectType
Tree :: ObjectType
objectParser :: ByteStringParser (ObjectType, ByteString)
treeParser :: Int -> ByteStringParser [(CMode, Path Rel File, String)]
data IndexEntry
IndexEntry :: Word32 -> Word32 -> Word32 -> Word32 -> Word32 -> Word32 -> Word32 -> Word32 -> Word32 -> Word32 -> ByteString -> Word16 -> Path Rel File -> IndexEntry

-- | the last time a file's metadata changed, this is stat(2) data
[ieCtimeS] :: IndexEntry -> Word32

-- | nanosecond fractions, this is stat(2) data
[ieCtimeN] :: IndexEntry -> Word32

-- | mtime seconds, the last time a file's data changed, this is stat(2)
--   data
[ieMTimeS] :: IndexEntry -> Word32

-- | mtime nanosecond fractions, this is stat(2) data
[ieMTimeN] :: IndexEntry -> Word32

-- | this is stat(2) data
[ieDev] :: IndexEntry -> Word32

-- | this is stat(2) data
[ieIno] :: IndexEntry -> Word32

-- | mode, split into (high to low bits)
[ieMode] :: IndexEntry -> Word32

-- | this is stat(2) data
[ieUid] :: IndexEntry -> Word32

-- | this is stat(2) data
[ieGid] :: IndexEntry -> Word32

-- | This is the on-disk size from stat(2), truncated to 32-bit.
[ieSize] :: IndexEntry -> Word32

-- | 160-bit SHA-1 for the represented object
[ieSha1] :: IndexEntry -> ByteString

-- | A 16-bit <tt>flags</tt> field split into (high to low bits)
[ieFlags] :: IndexEntry -> Word16
[iePath] :: IndexEntry -> Path Rel File
indexParser :: ByteStringParser [IndexEntry]
putIndex :: Foldable t => t IndexEntry -> Put

module HMGit.Internal.Core
type HMGitT = ReaderT HMGitConfig
hmGitRoot :: Monad m => HMGitT m (Path Abs Dir)
getCurrentDirFromHMGit :: (MonadThrow m, MonadIO m) => HMGitT m (Path Rel Dir)
runHMGit :: HMGitT m a -> HMGitConfig -> m a
data ObjectType
Blob :: ObjectType
Commit :: ObjectType
Tree :: ObjectType
data ObjectInfo
ObjectInfo :: ByteString -> ByteString -> Path Abs File -> ObjectInfo
[objectId] :: ObjectInfo -> ByteString
[objectData] :: ObjectInfo -> ByteString
[objectPath] :: ObjectInfo -> Path Abs File
data IndexEntry
IndexEntry :: Word32 -> Word32 -> Word32 -> Word32 -> Word32 -> Word32 -> Word32 -> Word32 -> Word32 -> Word32 -> ByteString -> Word16 -> Path Rel File -> IndexEntry

-- | the last time a file's metadata changed, this is stat(2) data
[ieCtimeS] :: IndexEntry -> Word32

-- | nanosecond fractions, this is stat(2) data
[ieCtimeN] :: IndexEntry -> Word32

-- | mtime seconds, the last time a file's data changed, this is stat(2)
--   data
[ieMTimeS] :: IndexEntry -> Word32

-- | mtime nanosecond fractions, this is stat(2) data
[ieMTimeN] :: IndexEntry -> Word32

-- | this is stat(2) data
[ieDev] :: IndexEntry -> Word32

-- | this is stat(2) data
[ieIno] :: IndexEntry -> Word32

-- | mode, split into (high to low bits)
[ieMode] :: IndexEntry -> Word32

-- | this is stat(2) data
[ieUid] :: IndexEntry -> Word32

-- | this is stat(2) data
[ieGid] :: IndexEntry -> Word32

-- | This is the on-disk size from stat(2), truncated to 32-bit.
[ieSize] :: IndexEntry -> Word32

-- | 160-bit SHA-1 for the represented object
[ieSha1] :: IndexEntry -> ByteString

-- | A 16-bit <tt>flags</tt> field split into (high to low bits)
[ieFlags] :: IndexEntry -> Word16
[iePath] :: IndexEntry -> Path Rel File
fromContents :: MonadCatch m => ObjectType -> ByteString -> HMGitT m ObjectInfo
storeObject :: (MonadIO m, MonadCatch m) => ObjectType -> ByteString -> HMGitT m ByteString
loadObject :: (MonadIO m, MonadCatch m, MonadPlus m) => String -> HMGitT m (ObjectType, ByteString)
loadTree :: MonadThrow m => ByteString -> HMGitT m [(CMode, Path Rel File, String)]
storeTree :: (MonadIO m, MonadCatch m) => HMGitT m ByteString
loadIndex :: (MonadIO m, MonadThrow m) => HMGitT m [IndexEntry]
storeIndex :: (MonadIO m, Foldable t) => t IndexEntry -> HMGitT m ()

-- | Currently <a>latestBlobHashes</a> does not support gitignore and
--   submodule, so we are embedding content to ignore directly in the code.
--   Comments HACK below are the relevant part.
data HMGitStatus
HMGitStatus :: Set (Path Rel File) -> Set (Path Rel File) -> Set (Path Rel File) -> HMGitStatus
[statusChanged] :: HMGitStatus -> Set (Path Rel File)
[statusNew] :: HMGitStatus -> Set (Path Rel File)
[statusDeleted] :: HMGitStatus -> Set (Path Rel File)
indexedBlobHashes :: (MonadIO m, MonadCatch m) => HMGitT m (Map (Path Rel File) String)
getStatus :: (MonadIO m, MonadCatch m) => HMGitT m HMGitStatus
instance GHC.Show.Show HMGit.Internal.Core.HMGitStatus

module HMGit.Internal.Parser.Pathspecs
pathspecs :: (MonadCatch m, MonadIO m, Alternative m) => Path Abs Dir -> SomeBase File -> [String] -> HMGitT m FilePath
lsMatches :: (MonadCatch m, MonadIO m) => Path Abs Dir -> [String] -> HMGitT m (Set (Path Abs File))

module HMGit.Commands.Porcelain.Status.Core
newtype Status m
Status :: ([FilePath] -> HMGitT m ()) -> Status m
[status] :: Status m -> [FilePath] -> HMGitT m ()
statusDefault :: (MonadIO m, MonadCatch m, Alternative m) => Status m
statusShort :: (MonadCatch m, MonadIO m, Alternative m) => Status m

module HMGit.Commands.Porcelain.Diff.Core
newtype Diff m
Diff :: (ShowDiff -> [FilePath] -> HMGitT m ()) -> Diff m
[diff] :: Diff m -> ShowDiff -> [FilePath] -> HMGitT m ()
showDiff :: String -> String -> ShowDiff
diffShow :: (MonadIO m, MonadCatch m, MonadPlus m) => Diff m

module HMGit.Commands.Porcelain.Add.Core
newtype Add m
Add :: ([FilePath] -> HMGitT m ()) -> Add m
[add] :: Add m -> [FilePath] -> HMGitT m ()
addDefault :: (MonadIO m, MonadCatch m) => Add m
addDryRun :: (MonadCatch m, MonadIO m) => Add m

module HMGit.Commands.Plumbing.CatFile.Core
data CatFile m
CatFileObjectType :: ObjectType -> (ObjectType -> ByteString -> HMGitT m ()) -> CatFile m
CatFileMode :: (ObjectType -> ByteString -> HMGitT m ()) -> CatFile m
catOptObject :: MonadIO m => ObjectType -> CatFile m
catOptObjectType :: MonadIO m => CatFile m
catOptObjectSize :: MonadIO m => CatFile m
catOptObjectPP :: (MonadIO m, MonadThrow m) => CatFile m
catFile :: (MonadIO m, MonadCatch m, MonadPlus m) => CatFile m -> String -> HMGitT m ()
instance Control.Monad.IO.Class.MonadIO m => Data.String.IsString (HMGit.Commands.Plumbing.CatFile.Core.CatFile m)

module HMGit
data HMGitConfig
HMGitConfig :: Path Abs Dir -> Int -> HMGitConfig
[hmGitDir] :: HMGitConfig -> Path Abs Dir
[hmGitTreeLimit] :: HMGitConfig -> Int
HMGitConfigInit :: HMGitConfig
newtype BugException
BugException :: String -> BugException
hmGitConfig :: (MonadThrow m, MonadIO m) => String -> m HMGitConfig
type HMGitT = ReaderT HMGitConfig
runHMGit :: HMGitT m a -> HMGitConfig -> m a

module HMGit.Commands.Plumbing.LsFiles.Core
newtype LsFiles m
LsFiles :: ([FilePath] -> HMGitT m ()) -> LsFiles m
[lsFiles] :: LsFiles m -> [FilePath] -> HMGitT m ()
lsFilesShow :: (MonadCatch m, MonadIO m, Alternative m) => LsFiles m
lsFilesDetail :: (MonadCatch m, MonadIO m, Alternative m) => LsFiles m

module HMGit.Commands.Plumbing.HashObject.Core
newtype HashObject m
HashObject :: (ObjectType -> ByteString -> HMGitT m ()) -> HashObject m
hashObjectShow :: (MonadCatch m, MonadIO m) => HashObject m
hashObjectWrite :: (MonadCatch m, MonadIO m) => HashObject m
hashObject :: (MonadCatch m, MonadIO m) => HashObject m -> ObjectType -> FilePath -> HMGitT m ()

module HMGit.Commands
data Cmd m
CmdInit :: (String -> Init m) -> RepositoryName -> Cmd m
CmdAdd :: Add m -> [FilePath] -> Cmd m
CmdCatFile :: CatFile m -> String -> Cmd m
CmdHashObject :: ObjectType -> HashObject m -> FilePath -> Cmd m
CmdLsFiles :: LsFiles m -> [FilePath] -> Cmd m
CmdStatus :: Status m -> [FilePath] -> Cmd m
CmdDiff :: Diff m -> [FilePath] -> Bool -> String -> String -> Cmd m

module HMGit.Commands.Porcelain.Status.Cmd
statusCmd :: (MonadCatch m, MonadIO m, Alternative m) => Mod CommandFields (Cmd m)

module HMGit.Commands.Porcelain.Status
newtype Status m
Status :: ([FilePath] -> HMGitT m ()) -> Status m
[status] :: Status m -> [FilePath] -> HMGitT m ()
statusCmd :: (MonadCatch m, MonadIO m, Alternative m) => Mod CommandFields (Cmd m)

module HMGit.Commands.Porcelain.Init.Cmd
initCmd :: (MonadThrow m, MonadIO m) => Mod CommandFields (Cmd m)

module HMGit.Commands.Porcelain.Init
init :: (String -> Init m) -> String -> RepositoryName -> HMGitT m ()
newtype Init m
Init :: (RepositoryName -> HMGitT m ()) -> Init m
initCmd :: (MonadThrow m, MonadIO m) => Mod CommandFields (Cmd m)

module HMGit.Commands.Porcelain.Diff.Cmd
diffCmd :: (MonadCatch m, MonadIO m, MonadPlus m) => Mod CommandFields (Cmd m)

module HMGit.Commands.Porcelain.Diff
newtype Diff m
Diff :: (ShowDiff -> [FilePath] -> HMGitT m ()) -> Diff m
[diff] :: Diff m -> ShowDiff -> [FilePath] -> HMGitT m ()
diffCmd :: (MonadCatch m, MonadIO m, MonadPlus m) => Mod CommandFields (Cmd m)
showDiff :: String -> String -> ShowDiff

module HMGit.Commands.Porcelain.Add.Cmd
addCmd :: (MonadCatch m, MonadIO m) => Mod CommandFields (Cmd m)

module HMGit.Commands.Porcelain.Add
newtype Add m
Add :: ([FilePath] -> HMGitT m ()) -> Add m
[add] :: Add m -> [FilePath] -> HMGitT m ()
addCmd :: (MonadCatch m, MonadIO m) => Mod CommandFields (Cmd m)

module HMGit.Commands.Plumbing.LsFiles.Cmd
lsFilesCmd :: (MonadCatch m, MonadIO m, Alternative m) => Mod CommandFields (Cmd m)

module HMGit.Commands.Plumbing.LsFiles
newtype LsFiles m
LsFiles :: ([FilePath] -> HMGitT m ()) -> LsFiles m
[lsFiles] :: LsFiles m -> [FilePath] -> HMGitT m ()
lsFilesCmd :: (MonadCatch m, MonadIO m, Alternative m) => Mod CommandFields (Cmd m)

module HMGit.Commands.Plumbing.HashObject.Cmd
hashObjectCmd :: (MonadCatch m, MonadIO m) => Mod CommandFields (Cmd m)

module HMGit.Commands.Plumbing.HashObject
hashObject :: (MonadCatch m, MonadIO m) => HashObject m -> ObjectType -> FilePath -> HMGitT m ()
newtype HashObject m
HashObject :: (ObjectType -> ByteString -> HMGitT m ()) -> HashObject m
hashObjectCmd :: (MonadCatch m, MonadIO m) => Mod CommandFields (Cmd m)

module HMGit.Commands.Plumbing.CatFile.Cmd
catFileCmd :: (MonadThrow m, MonadIO m) => Mod CommandFields (Cmd m)

module HMGit.Commands.Plumbing.CatFile
catFile :: (MonadIO m, MonadCatch m, MonadPlus m) => CatFile m -> String -> HMGitT m ()
data CatFile m
CatFileObjectType :: ObjectType -> (ObjectType -> ByteString -> HMGitT m ()) -> CatFile m
CatFileMode :: (ObjectType -> ByteString -> HMGitT m ()) -> CatFile m
catFileCmd :: (MonadThrow m, MonadIO m) => Mod CommandFields (Cmd m)
